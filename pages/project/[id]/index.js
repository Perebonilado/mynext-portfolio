import Head from "next/head";
import Link from "next/link";
import { server } from '../../../config'
import { motion } from 'framer-motion'
import ProjectStyles from '../../../styles/ProjectStyles.module.css'
import { data } from '../../../ProjectsData/data'


const Project = ({project}) => {

    const { name, tech, description, url, github, projectLink } = project

    return ( 
    <>
      <Head>
        <title>{name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossOrigin="anonymous"></link>
      </Head>
    <motion.div
    
    className={`${ProjectStyles['container']}`}
    
    initial="hidden" animate="visible" variants={{
  hidden: {
    scale: .8,
    opacity: 0
  },
  visible: {
    scale: 1,
    opacity: 1,
    transition: {
      delay: .4
    }
  },
}}
    
    > 
        <div>
        <Link href='/'>Retun Home</Link>
        <img src={url} alt={name} />
        <h1>{name}</h1>
        <p className={`${ProjectStyles['tech']}`}>This project was built with: {tech}</p>
        <a href={github} rel="noreferrer" target='_blank' className={`${ProjectStyles['project-link']}`}>Github</a>
        <a href={projectLink} rel="noreferrer" target='_blank'>View Project</a>
        </div>


        <div>
        <h2>Why I Built This</h2>
        <p className={`${ProjectStyles['description']}`}>{description}</p>
        </div>
    </motion.div>
    </>
     );
}

export default Project;

export async function getStaticProps (context) {
    const res = await fetch(`${server}/api/projects/${context.params.id}`, { headers: {
      'Content-Type' : 'application/json'
    }})
    const project = await res.json()

    console.log(project)

    return {
        props: {project}
    }
}

export async function getStaticPaths () {
    const res = await fetch(`${server}/api/projects`, { headers: {
      'Content-Type' : 'application/json'
    }})
    const projects = await res.json()

    const id = projects.map((project)=>{
        return {params: {id: project.id.toString()}}
    })

    return {
        paths: [...id],
        fallback: true
    };

}
